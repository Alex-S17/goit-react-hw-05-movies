{"version":3,"file":"static/js/245.194eb24d.chunk.js","mappings":"oOACA,EAA6B,+BAA7B,EAA2E,iC,SCE9DA,EAAa,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACnC,OACE,gBAAIC,UAAWC,EAAf,WACE,eAAGD,UAAWC,EAAd,qBAAyCH,MACzC,uBAAIC,MAGT,ECTD,EAA8B,6BAA9B,EAAwE,4BCoDxE,EA9CgB,WACd,OAAoCG,EAAAA,EAAAA,UAAS,CAAC,GAA9C,eAAOC,EAAP,KAAmBC,EAAnB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QASR,IAPAE,EAAAA,EAAAA,YAAU,WACRH,GAAW,IACXI,EAAAA,EAAAA,IAAmBH,GAChBI,MAAK,SAAAC,GAAQ,OAAIR,EAAcQ,EAASC,QAA3B,IAChBP,GAAW,EACZ,GAAE,CAACC,IAECJ,EAEL,OACE,2BACGE,IAAY,SAAC,KAAD,CACXS,SAAS,EACTC,OAAO,MACPC,MAAM,MACNC,UAAU,cACVC,aAAc,CACZC,SAAU,QACVC,IAAK,MACLC,KAAM,MACNC,UAAW,4BAIf,eAAItB,UAAWC,EAAf,qBACCE,EAAWoB,OAAS,GAChB,wBACApB,EAAWqB,KAAI,SAAAC,GAAM,OACpB,SAAC5B,EAAD,CAEEC,OAAQ2B,EAAO3B,OACfC,QAAS0B,EAAO1B,SAFX0B,EAAOC,GAFM,OAQrB,cAAG1B,UAAWC,EAAd,wDAIV,C,8MCnDY0B,EAAM,mCACNC,EAAiB,mCAEvB,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,6GAEoBC,MAAM,2DAAD,OAA4DH,IAFrF,cAEGf,EAFH,yBAGIA,EAASmB,QAHb,gCAKHC,QAAQC,IAAI,SAAZ,MALG,wFASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,gGAEoBL,MAAM,sCAAD,OAAuCK,EAAvC,oBAA0DR,IAFnF,cAEGf,EAFH,yBAGIA,EAASmB,QAHb,gCAKHC,QAAQC,IAAI,SAAZ,MALG,wFASA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA+BD,GAA/B,gGAEoBL,MAAM,sCAAD,OAAuCK,EAAvC,4BAAkER,IAF3F,cAEGf,EAFH,yBAGIA,EAASmB,QAHb,gCAKHC,QAAQC,IAAI,SAAZ,MALG,wFASA,SAAevB,EAAtB,+CAAO,OAAP,oBAAO,WAAkCyB,GAAlC,gGAEoBL,MAAM,sCAAD,OAAuCK,EAAvC,4BAAkER,IAF3F,cAEGf,EAFH,yBAGIA,EAASmB,QAHb,gCAKHC,QAAQC,IAAI,SAAZ,MALG,wFASA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAkCC,GAAlC,gGAGoBR,MAAM,qDAAD,OAAsDH,EAAtD,kBAAmEW,EAAnE,+CAHzB,cAGG1B,EAHH,yBAIIA,EAASmB,QAJb,gCAMHC,QAAQC,IAAI,SAAZ,MANG,wF","sources":["webpack://react-homework-template/./src/components/ReviewInfo/ReviewInfo.module.css?28c3","components/ReviewInfo/ReviewInfo.jsx","webpack://react-homework-template/./src/components/Reviews/Reviews.module.css?7248","components/Reviews/Reviews.jsx","services/requestMovies.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"reviewItem\":\"ReviewInfo_reviewItem__ibLm4\",\"reviewAuthor\":\"ReviewInfo_reviewAuthor__bpk4B\"};","import PropTypes from \"prop-types\";\nimport css from \"./ReviewInfo.module.css\";\n\nexport const ReviewInfo = ({ author, content }) => {\n  return (\n    <li className={css.reviewItem}>\n      <p className={css.reviewAuthor}>Author: {author}</p>\n      <p>{content}</p>\n    </li>\n  );\n};\n\nReviewInfo.propTypes = {\n  author: PropTypes.string.isRequired,\n  content: PropTypes.string.isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {\"reviewTitle\":\"Reviews_reviewTitle__-9Xsn\",\"ifNoReview\":\"Reviews_ifNoReview__0wRFz\"};","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Dna } from 'react-loader-spinner';\nimport { requestMovieReview } from \"../../services/requestMovies\";\nimport { ReviewInfo } from \"../ReviewInfo/ReviewInfo\";\nimport css from \"./Reviews.module.css\";\n\nconst Reviews = () => {\n  const [reviewInfo, setReviewInfo] = useState({});\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setLoading(true);\n    requestMovieReview(movieId)\n      .then(response => setReviewInfo(response.results));\n    setLoading(false);\n  }, [movieId]);\n\n  if (!reviewInfo) return;\n\n  return (\n    <div>\n      {loading && (<Dna\n        visible={true}\n        height=\"200\"\n        width=\"200\"\n        ariaLabel=\"dna-loading\"\n        wrapperStyle={{\n          position: \"fixed\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: \"translate(-50%, -50%)\",\n        }}\n      />)}\n\n      <h1 className={css.reviewTitle}>REVIEWS</h1>\n      {reviewInfo.length > 0\n        ? (<ul>\n          {reviewInfo.map(review => (\n            <ReviewInfo\n              key={review.id}\n              author={review.author}\n              content={review.content}\n            />\n          ))}\n        </ul>)\n        : (<p className={css.ifNoReview}>We don't have any reviews for this movie</p>)\n      }\n    </div>\n  );\n};\n\nexport default Reviews;\n\n","export const KEY = '62f46feb65c2319fb0db62c2c080ca35';\nexport const PATH_TO_IMAGES = 'https://image.tmdb.org/t/p/w500/';\n\nexport async function requestTrandingMovies() {\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/trending/movie/day?api_key=${KEY}`);\n    return response.json();    \n  } catch (error) {\n    console.log('ERROR:', error);    \n  };\n};\n\nexport async function requestMoviesByID(movieID) {\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/movie/${movieID}?api_key=${KEY}`);\n    return response.json();    \n  } catch (error) {\n    console.log('ERROR:', error);    \n  };\n};\n\nexport async function requestCastByID(movieID) {\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/movie/${movieID}/credits?api_key=${KEY}`);\n    return response.json();    \n  } catch (error) {\n    console.log('ERROR:', error);    \n  };\n};\n\nexport async function requestMovieReview(movieID) {\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/movie/${movieID}/reviews?api_key=${KEY}`);\n    return response.json();    \n  } catch (error) {\n    console.log('ERROR:', error);    \n  };\n};\n\nexport async function requestMovieByName(httpQuery) {\n  // console.log(httpQuery);\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${KEY}&query=${httpQuery}&language=en-US&page=1&include_adult=false`);\n    return response.json();    \n  } catch (error) {\n    console.log('ERROR:', error);    \n  };\n};\n\n"],"names":["ReviewInfo","author","content","className","css","useState","reviewInfo","setReviewInfo","loading","setLoading","movieId","useParams","useEffect","requestMovieReview","then","response","results","visible","height","width","ariaLabel","wrapperStyle","position","top","left","transform","length","map","review","id","KEY","PATH_TO_IMAGES","requestTrandingMovies","fetch","json","console","log","requestMoviesByID","movieID","requestCastByID","requestMovieByName","httpQuery"],"sourceRoot":""}