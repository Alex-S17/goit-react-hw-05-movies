{"version":3,"file":"static/js/433.fe122c9b.chunk.js","mappings":"oOACA,EAA4B,4BAA5B,EAAqE,6BAArE,EAA8G,4BAA9G,EAAsJ,sD,kBCIzIA,EAAW,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aACtCC,EAAc,KAQlB,OAHEA,EAJGD,EAIWE,EAAAA,GAAiBF,EAHjBG,GAOd,gBAAIC,UAAWC,EAAf,WACE,gBAAKD,UAAWC,EAAgBC,IAAKL,EAAaM,IAAKT,EAAMU,MAAO,OACpE,cAAGJ,UAAWC,EAAd,SAA8BP,KAC9B,eAAGM,UAAWC,EAAd,wBAAyCN,OAG9C,ECpBD,EAA4B,wBAA5B,EAAkE,0BAAlE,EAAuG,uBC0DvG,EApDa,WACX,OAAgCU,EAAAA,EAAAA,UAAS,CAAC,GAA1C,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QASR,IAPAE,EAAAA,EAAAA,YAAU,WACRH,GAAW,IACXI,EAAAA,EAAAA,IAAgBH,GACbI,MAAK,SAAAC,GAAQ,OAAIR,EAAYQ,EAASC,KAAzB,IAChBP,GAAW,EACZ,GAAE,CAACC,IAECJ,EAEL,OACE,2BACGE,IAAY,SAAC,KAAD,CACXS,SAAS,EACTC,OAAO,MACPd,MAAM,MACNe,UAAU,cACVC,aAAc,CACZC,SAAU,QACVC,IAAK,MACLC,KAAM,MACNC,UAAW,4BAIf,eAAIxB,UAAWC,EAAf,kBACCK,EAASmB,OAAS,GACd,eAAIzB,UAAWC,EAAf,SACAK,EAASoB,KAAI,SAAAV,GACZ,IAAMW,EAAsCX,EAAtCW,GAAIjC,EAAkCsB,EAAlCtB,KAAMC,EAA4BqB,EAA5BrB,UAAWC,EAAiBoB,EAAjBpB,aAE3B,OADKA,IAAcA,EAAe,KAEhC,SAACH,EAAD,CAEEC,KAAMA,EACNC,UAAWA,EACXC,aAAcA,GAHT+B,EAMV,OAGA,cAAG3B,UAAWC,EAAd,iEAIV,C,8MCzDY2B,EAAM,mCACN9B,EAAiB,mCAEvB,SAAe+B,IAAtB,4CAAO,OAAP,oBAAO,6GAEoBC,MAAM,2DAAD,OAA4DF,IAFrF,cAEGb,EAFH,yBAGIA,EAASgB,QAHb,gCAKHC,QAAQC,IAAI,SAAZ,MALG,wFASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,gGAEoBL,MAAM,sCAAD,OAAuCK,EAAvC,oBAA0DP,IAFnF,cAEGb,EAFH,yBAGIA,EAASgB,QAHb,gCAKHC,QAAQC,IAAI,SAAZ,MALG,wFASA,SAAepB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BsB,GAA/B,gGAEoBL,MAAM,sCAAD,OAAuCK,EAAvC,4BAAkEP,IAF3F,cAEGb,EAFH,yBAGIA,EAASgB,QAHb,gCAKHC,QAAQC,IAAI,SAAZ,MALG,wFASA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAkCD,GAAlC,gGAEoBL,MAAM,sCAAD,OAAuCK,EAAvC,4BAAkEP,IAF3F,cAEGb,EAFH,yBAGIA,EAASgB,QAHb,gCAKHC,QAAQC,IAAI,SAAZ,MALG,wFASA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAAkCC,GAAlC,gGAGoBR,MAAM,qDAAD,OAAsDF,EAAtD,kBAAmEU,EAAnE,+CAHzB,cAGGvB,EAHH,yBAIIA,EAASgB,QAJb,gCAMHC,QAAQC,IAAI,SAAZ,MANG,wF","sources":["webpack://react-homework-template/./src/components/CastInfo/CastInfo.module.css?0a17","components/CastInfo/CastInfo.jsx","webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","services/requestMovies.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"actorItem\":\"CastInfo_actorItem__Epmr7\",\"actorImage\":\"CastInfo_actorImage__jru6Z\",\"actorName\":\"CastInfo_actorName__5pmkI\",\"character\":\"CastInfo_character__ZmsBc CastInfo_actorName__5pmkI\"};","import PropTypes from \"prop-types\";\nimport { PATH_TO_IMAGES } from \"../../services/requestMovies\";\nimport css from \"./CastInfo.module.css\";\nimport actorPlaceholder from \"../../images/actor-placeholder.jpg\";\n\nexport const CastInfo = ({ name, character, profile_path }) => {\n  let pathToPhoto = null;\n  if (!profile_path) {\n    pathToPhoto = actorPlaceholder;\n  }\n  else {\n    pathToPhoto = PATH_TO_IMAGES + profile_path;\n  };\n \n  return (\n    <li className={css.actorItem}>\n      <img className={css.actorImage} src={pathToPhoto} alt={name} width={150} />\n      <p className={css.actorName}>{name}</p>\n      <p className={css.character}>Character: {character}</p>\n    </li>\n  );\n};\n\nCastInfo.propTypes = {\n  name: PropTypes.string.isRequired,\n  character: PropTypes.string.isRequired,\n  profile_path: PropTypes.string.isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {\"castTitle\":\"Cast_castTitle__eoJbw\",\"castWrapper\":\"Cast_castWrapper__Arm-x\",\"ifNoCast\":\"Cast_ifNoCast__8wZwh\"};","import { useState, useEffect } from \"react\"\nimport { useParams } from \"react-router-dom\";\nimport { Dna } from 'react-loader-spinner';\nimport { requestCastByID } from \"../../services/requestMovies\";\nimport { CastInfo } from \"../CastInfo/CastInfo\";\nimport css from \"./Cast.module.css\";\n\nconst Cast = () => {\n  const [castInfo, setCastInfo] = useState({});\n  const [loading, setLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setLoading(true);\n    requestCastByID(movieId)\n      .then(response => setCastInfo(response.cast));\n    setLoading(false);\n  }, [movieId]);\n\n  if (!castInfo) return;\n\n  return (\n    <div>\n      {loading && (<Dna\n        visible={true}\n        height=\"200\"\n        width=\"200\"\n        ariaLabel=\"dna-loading\"\n        wrapperStyle={{\n          position: \"fixed\",\n          top: \"50%\",\n          left: \"50%\",\n          transform: \"translate(-50%, -50%)\",\n        }}\n      />)}\n\n      <h1 className={css.castTitle}>CAST</h1>      \n      {castInfo.length > 0\n        ? (<ul className={css.castWrapper}>\n          {castInfo.map(cast => {\n            let { id, name, character, profile_path } = cast;\n            if (!profile_path) profile_path = '';\n            return (\n              <CastInfo\n                key={id}\n                name={name}\n                character={character}\n                profile_path={profile_path}\n              />\n            );\n          })\n          }\n        </ul>)\n        : (<p className={css.ifNoCast}>We don't have any cast information for this movie</p>)\n      }\n    </div>\n  );\n};\n\nexport default Cast;\n\n\n","export const KEY = '62f46feb65c2319fb0db62c2c080ca35';\nexport const PATH_TO_IMAGES = 'https://image.tmdb.org/t/p/w500/';\n\nexport async function requestTrandingMovies() {\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/trending/movie/day?api_key=${KEY}`);\n    return response.json();    \n  } catch (error) {\n    console.log('ERROR:', error);    \n  };\n};\n\nexport async function requestMoviesByID(movieID) {\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/movie/${movieID}?api_key=${KEY}`);\n    return response.json();    \n  } catch (error) {\n    console.log('ERROR:', error);    \n  };\n};\n\nexport async function requestCastByID(movieID) {\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/movie/${movieID}/credits?api_key=${KEY}`);\n    return response.json();    \n  } catch (error) {\n    console.log('ERROR:', error);    \n  };\n};\n\nexport async function requestMovieReview(movieID) {\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/movie/${movieID}/reviews?api_key=${KEY}`);\n    return response.json();    \n  } catch (error) {\n    console.log('ERROR:', error);    \n  };\n};\n\nexport async function requestMovieByName(httpQuery) {\n  // console.log(httpQuery);\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${KEY}&query=${httpQuery}&language=en-US&page=1&include_adult=false`);\n    return response.json();    \n  } catch (error) {\n    console.log('ERROR:', error);    \n  };\n};\n\n"],"names":["CastInfo","name","character","profile_path","pathToPhoto","PATH_TO_IMAGES","actorPlaceholder","className","css","src","alt","width","useState","castInfo","setCastInfo","loading","setLoading","movieId","useParams","useEffect","requestCastByID","then","response","cast","visible","height","ariaLabel","wrapperStyle","position","top","left","transform","length","map","id","KEY","requestTrandingMovies","fetch","json","console","log","requestMoviesByID","movieID","requestMovieReview","requestMovieByName","httpQuery"],"sourceRoot":""}